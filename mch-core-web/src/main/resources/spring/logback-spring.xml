<?xml version="1.0" encoding="UTF-8"?>
<!--    scan:
        当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
        scanPeriod:
        设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
        debug:
        当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="false">
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <!-- 项目名称 -->
    <property name="PROJECT_NAME" value="rto-trackify-service"/>
    <property name="APP_ID" value="rto-trackify-service"/>

    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
    <property name="LOG_HOME" value="${log.base}"/>

    <property name="CONSOLE_LOG_PATTERN"
              value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) trackify %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %.-2048msg%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>

    <!-- 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 系统错误日志文件 -->
    <appender name="LOG_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <immediateFlush>true</immediateFlush>
        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名 -->
            <FileNamePattern>${LOG_HOME}/${PROJECT_NAME}/${APP_ID}.%d{yyyy-MM-dd}.log
            </FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>${RTO_LOG_HISTORY:-15}</MaxHistory>
        </rollingPolicy>

        <encoder
                class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="LOG_FILE_JSON"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名 -->
            <FileNamePattern>${LOG_HOME}/${PROJECT_NAME}/${APP_ID}-json.%d{yyyy-MM-dd}.log
            </FileNamePattern>
            <!--日志文件保留天数 -->
            <MaxHistory>${RTO_LOG_HISTORY:-15}</MaxHistory>
        </rollingPolicy>

        <!-- <encoder
          class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
          <pattern>${CONSOLE_LOG_PATTERN}</pattern>
          <charset>UTF-8</charset>
        </encoder> -->

        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{"serviceName":"${PROJECT_NAME}"}</customFields>
            <timestampPattern>yyyy-MM-dd HH:mm:ss.SSS</timestampPattern>
            <fieldNames>
                <timestamp>time</timestamp>
                <message>msg</message>
                <levelValue>[ignore]</levelValue>
                <logger>logger</logger>
                <version>[ignore]</version>
            </fieldNames>
        </encoder>
    </appender>

    <logger name="log_file" additivity="true">
        <appender-ref ref="LOG_FILE"/>
    </logger>


    <!-- 开发环境下的日志配置 -->
    <springProfile name="local,test,uat">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="LOG_FILE"/>
        </root>
        <logger name="org"              level="INFO"/>
        <logger name="com.netflix"      level="INFO"/>
        <logger name="com.alibaba"      level="INFO"/>
        <logger name="org"              level="INFO"/>
        <logger name="ch.qos.logback"   level="INFO"/>
        <logger name="java.sql"         level="INFO"/>
        <logger name="com"              level="INFO"/>
        <logger name="io"               level="INFO"/>
    </springProfile>

    <springProfile name="gtest,ktest,gtmtest,gtmdev">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="LOG_FILE"/>
        </root>
        <logger name="org" level="INFO"/>
        <logger name="com.netflix" level="INFO"/>
    </springProfile>

    <!-- 开发环境下的日志配置 start-->
    <springProfile name="dev,debug">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="LOG_FILE"/>
            <appender-ref ref="LOG_FILE_JSON"/>
        </root>
    </springProfile>
    <!-- 开发环境下的日志配置 end-->

    <!-- 预发布环境下的日志配置 start-->
    <springProfile name="pre">
        <root level="INFO">
            <appender-ref ref="LOG_FILE"/>
        </root>
    </springProfile>
    <!-- 预发布环境下的日志配置 end-->

    <!-- 生产环境下的日志配置 start-->
    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="LOG_FILE"/>
            <appender-ref ref="LOG_FILE_JSON"/>
        </root>
    </springProfile>

    <springProfile name="gprod">
        <root level="INFO">
            <appender-ref ref="LOG_FILE"/>
            <appender-ref ref="LOG_FILE_JSON"/>
        </root>
    </springProfile>

    <springProfile name="kprod,gtmprod">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="LOG_FILE"/>
        </root>
    </springProfile>
    <!-- 生产环境下的日志配置 end-->

</configuration>
